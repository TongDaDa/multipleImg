{"dependencies":[],"generated":{"js":"var global = (1,eval)(\"this\");\n/*!\n * Lo-Dash v0.1.0 <https://github.com/bestiejs/lodash>\n * Copyright 2012 John-David Dalton <http://allyoucanleet.com/>\n * Based on Underscore.js 1.3.3, copyright 2009-2012 Jeremy Ashkenas, DocumentCloud Inc.\n * <http://documentcloud.github.com/underscore>\n * Available under MIT license <http://mths.be/mit>\n */\n;(function(window, undefined) {\n  'use strict';\n\n  /** Used to escape and unescape characters in templates */\n  var escapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    'r': '\\r',\n    'n': '\\n',\n    't': '\\t',\n    'u2028': '\\u2028',\n    'u2029': '\\u2029'\n  };\n\n  // assign the result as keys and the keys as values\n  (function() {\n    for (var prop in escapes) {\n      escapes[escapes[prop]] = prop;\n    }\n  }());\n\n  /** Detect free variable `exports` */\n  var freeExports = typeof exports == 'object' && exports &&\n    (typeof global == 'object' && global && global == global.global && (window = global), exports);\n\n  /** Used to generate unique IDs */\n  var idCounter = 0;\n\n  /** Used to restore the original `_` reference in `noConflict` */\n  var oldDash = window._;\n\n  /** Used to replace unescape characters with their escaped counterpart */\n  var reEscaper = /\\\\|'|\\r|\\n|\\t|\\u2028|\\u2029/g;\n\n  /**\n   * Used for `templateSettings` properties such as `escape`, `evaluate`,\n   * or `interpolate` with explicitly assigned falsey values to ensure no match\n   * is made.\n   */\n  var reNoMatch = /.^/;\n\n  /** Used to replace escaped characters with their unescaped counterpart */\n  var reUnescaper = /\\\\(\\\\|'|r|n|t|u2028|u2029)/g;\n\n  /** Object#toString result shortcuts */\n  var arrayClass = '[object Array]',\n      boolClass = '[object Boolean]',\n      dateClass = '[object Date]',\n      funcClass = '[object Function]',\n      numberClass = '[object Number]',\n      regexpClass = '[object RegExp]',\n      stringClass = '[object String]';\n\n  /** Native prototype shortcuts */\n  var ArrayProto = Array.prototype,\n      ObjProto = Object.prototype;\n\n  /** Native method shortcuts */\n  var concat = ArrayProto.concat,\n      hasOwnProperty = ObjProto.hasOwnProperty,\n      push = ArrayProto.push,\n      slice = ArrayProto.slice,\n      toString = ObjProto.toString,\n      unshift = ArrayProto.unshift;\n\n  /* Native method shortcuts for methods with the same name as other `lodash` methods */\n  var nativeIsArray = Array.isArray,\n      nativeIsFinite = window.isFinite,\n      nativeKeys = Object.keys;\n\n  /** Timer shortcuts */\n  var clearInteval = window.clearInterval,\n      setTimeout = window.setTimeout;\n\n  /** Compilation options for `_.difference` */\n  var differenceFactoryOptions = {\n    'args': 'array',\n    'top': 'var values=concat.apply([],slice.call(arguments,1))',\n    'init': '[]',\n    'inLoop': 'if(indexOf(values,array[index])<0)result.push(array[index])'\n  };\n\n  /** Compilation options for `_.every` */\n  var everyFactoryOptions = {\n    'init': 'true',\n    'inLoop': 'if(!callback(collection[index],index,collection))return !result'\n  };\n\n  /** Compilation options for `_.extend` */\n  var extendFactoryOptions = {\n    'args': 'object',\n    'init': 'object',\n    'beforeLoop': 'for(var source,j=1,length=arguments.length;j<length;j++){\\nsource=arguments[j]',\n    'loopExp': 'index in source',\n    'inLoop': 'object[index]=source[index]',\n    'useHas': false,\n    'afterLoop': '}'\n  };\n\n  /** Compilation options for `_.filter` */\n  var filterFactoryOptions = {\n    'init': '[]',\n    'inLoop': 'callback(collection[index],index,collection)&&result.push(collection[index])'\n  };\n\n  /** Compilation options for `_.forEach` */\n  var forEachFactoryOptions = {\n    'args': 'collection,callback,thisArg',\n    'top':\n      'if(!callback){\\ncallback=identity\\n}\\n' +\n      'else if(thisArg){\\ncallback=bind(callback,thisArg)\\n}',\n    'init': 'collection',\n    'inLoop': 'callback(collection[index],index,collection)'\n  };\n\n  /** Compilation options for `_.keys` */\n  var keysFactoryOptions = {\n    'args': 'object',\n    'top': 'if(object!==Object(object))throw TypeError()',\n    'init': '[]',\n    'inLoop': 'result.push(index)'\n  };\n\n  /** Compilation options for `_.map` */\n  var mapFactoryOptions = {\n    'init': '',\n    'exits': '[]',\n    'beforeLoop': {\n      'array': 'result=Array(length)',\n      'object': 'result=[]'\n    },\n    'inLoop': {\n      'array': 'result[index]=callback(collection[index],index,collection)',\n      'object': 'result[result.length]=callback(collection[index],index,collection)'\n    }\n  };\n\n  /** Compilation options for `_.max` */\n  var maxFactoryOptions = {\n    'top':\n      'var current,result=-Infinity,computed=result;\\n' +\n      'if(!callback){\\n' +\n        'if(isArray(collection)&&collection[0]===+collection[0])return Math.max.apply(Math,collection);\\n' +\n        'if(isEmpty(collection))return result;\\n' +\n      '}else if(thisArg)callback=bind(callback,thisArg)',\n    'inLoop':\n        'current=callback?callback(collection[index],index,collection):collection[index];\\n' +\n        'if(current>=computed)computed=current,result=collection[index]'\n  };\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * The `lodash` function.\n   *\n   * @name _\n   * @param {Mixed} value The value to wrap in a `Lodash` instance.\n   * @returns {Object} Returns a `Lodash` instance.\n   */\n  function lodash(value) {\n    // allow invoking `lodash` without the `new` operator\n    return new Lodash(value);\n  }\n\n  /**\n   * Creates a `Lodash` instance that wraps a value to allow chaining.\n   *\n   * @private\n   * @constructor\n   * @param {Mixed} value The value to wrap.\n   */\n  function Lodash(value) {\n    this._wrapped = value;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Checks if a `value` is an array.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is an array, else `false`.\n   * @example\n   *\n   * (function() { return _.isArray(arguments); })();\n   * // => false\n   *\n   * _.isArray([1, 2, 3]);\n   * // => true\n   */\n  var isArray = nativeIsArray || function isArray(value) {\n    return toString.call(value) == arrayClass;\n  };\n\n  /**\n   * Checks if a `value` is empty. Arrays or strings with a length of 0 and\n   * objects with no enumerable own properties are considered \"empty\".\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is empty, else `false`.\n   * @example\n   *\n   * _.isEmpty([1, 2, 3]);\n   * // => false\n   *\n   * _.isEmpty({});\n   * // => true\n   */\n  var isEmpty = iterationFactory({\n    'args': 'value',\n    'iterate': 'objects',\n    'top': 'var className=toString.call(value)',\n    'init': 'true',\n    'beforeLoop': 'if(className==arrayClass||className==stringClass)return !value.length',\n    'inLoop': 'return false'\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Compiles iteration functions.\n   *\n   * @private\n   * @param {Object} [options1, options2, ..] The compile options objects.\n   * @returns {Function} Returns the compiled function.\n   */\n  function iterationFactory() {\n    var prop,\n        index = -1,\n        array = {},\n        object = {},\n        options = {},\n        props = ['beforeLoop', 'loopExp', 'inLoop', 'afterLoop'];\n\n    while (++index < arguments.length) {\n      for (prop in arguments[index]) {\n        options[prop] = arguments[index][prop];\n      }\n    }\n\n    while ((prop = props.pop())) {\n      if (typeof options[prop] == 'object') {\n        array[prop] = options[prop].array;\n        object[prop] = options[prop].object;\n      } else {\n        array[prop] = object[prop] = options[prop] || '';\n      }\n    }\n\n    var args = options.args,\n        firstArg = /^[^,]+/.exec(args)[0],\n        init = options.init,\n        iterate = options.iterate,\n        arrayBranch = !(args == 'object' || iterate == 'objects'),\n        objectBranch = !(args == 'array' || iterate == 'arrays'),\n        useHas = options.useHas !== false;\n\n    return Function('arrayClass,bind,concat,funcClass,hasOwnProperty,identity,' +\n                    'indexOf,Infinity,isArray,isEmpty,Math,slice,stringClass,' +\n                    'toString,undefined',\n      '\"use strict\";' +\n      'return function(' + args + '){\\n' +\n        (options.top || '') + ';\\n' +\n        ('var index, result' + (init ? '=' + init : '')) + ';\\n' +\n        'if(' + firstArg + '==undefined)return ' + (options.exits || 'result') + ';\\n' +\n        (arrayBranch\n          ? 'var length=' + firstArg + '.length;\\nindex=-1;\\n' +\n            ((objectBranch ? 'if(length===+length){\\n'  : '') +\n            (array.beforeLoop || '') + ';\\n' +\n            'while(' + (array.loopExp || '++index<length') + '){\\n' + array.inLoop + '\\n}' +\n            (array.afterLoop || '') + ';\\n' +\n            (objectBranch ? '\\n}\\n' : ''))\n          : ''\n        ) +\n        (objectBranch\n          ? ((arrayBranch ? 'else{\\n' : '') +\n            (object.beforeLoop || '') + ';\\n' +\n            'for(' + (object.loopExp || 'index in ' + firstArg) + '){\\n' +\n              (useHas ? 'if(hasOwnProperty.call(' + /\\S+$/.exec(object.loopExp || firstArg)[0] + ',index)){\\n' : '') +\n                object.inLoop +\n              (useHas ? '\\n}' : '') +\n            '\\n}' +\n            (object.afterLoop || '') + ';\\n' +\n            (arrayBranch ? '\\n}\\n' : ''))\n          : ''\n        ) +\n        (options.bottom || '') + ';\\n' +\n        'return ' + (options.returns || 'result') +\n      '\\n}'\n    )(arrayClass, bind, concat, funcClass, hasOwnProperty, identity,\n      indexOf, Infinity, isArray, isEmpty, Math, slice, stringClass, toString);\n  }\n\n  /**\n   * Unescapes characters, previously escaped for inclusion in compiled string\n   * literals, so they may compiled into function bodies.\n   * (Used for template interpolation, evaluation, or escaping)\n   *\n   * @private\n   * @param {String} string The string to unescape.\n   * @returns {String} Returns the unescaped string.\n   */\n  function unescape(string) {\n    return string.replace(reUnescaper, function(match, escaped) {\n      return escapes[escaped];\n    });\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Checks if a given `target` value is present in a `collection` using strict\n   * equality for comparisons, i.e. `===`.\n   *\n   * @static\n   * @memberOf _\n   * @alias include\n   * @category Collections\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Mixed} target The value to check for.\n   * @returns {Boolean} Returns `true` if `target` value is found, else `false`.\n   * @example\n   *\n   * _.contains([1, 2, 3], 3);\n   * // => true\n   */\n  var contains = iterationFactory({\n    'args': 'collection,target',\n    'init': 'false',\n    'inLoop': 'if(collection[index]===target)return true'\n  });\n\n  /**\n   * Checks if the `callback` returns truthy for **all** values of a `collection`.\n   * The `callback` is invoked with 3 arguments; for arrays they are\n   * (value, index, array) and for objects they are (value, key, object).\n   *\n   * @static\n   * @memberOf _\n   * @alias all\n   * @category Collections\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} callback The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding for the callback.\n   * @returns {Boolean} Returns `true` if all values pass the callback check, else `false`.\n   * @example\n   *\n   * _.every([true, 1, null, 'yes'], Boolean);\n   * => false\n   */\n  var every = iterationFactory(forEachFactoryOptions, everyFactoryOptions);\n\n  /**\n   * Examines each value in a `collection`, returning an array of all values the\n   * `callback` returns truthy for. The `callback` is invoked with 3 arguments;\n   * for arrays they are (value, index, array) and for objects they are\n   * (value, key, object).\n   *\n   * @static\n   * @memberOf _\n   * @alias select\n   * @category Collections\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} callback The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding for the callback.\n   * @returns {Array} Returns a new array of values that passed callback check.\n   * @example\n   *\n   * var evens = _.filter([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n   * // => [2, 4, 6]\n   */\n  var filter = iterationFactory(forEachFactoryOptions, filterFactoryOptions);\n\n  /**\n   * Examines each value in a `collection`, returning the first one the `callback`\n   * returns truthy for. The function returns as soon as it finds an acceptable\n   * value, and does not iterate over the entire `collection`. The `callback` is\n   * invoked with 3 arguments; for arrays they are (value, index, array) and for\n   * objects they are (value, key, object).\n   *\n   * @static\n   * @memberOf _\n   * @alias detect\n   * @category Collections\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} callback The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding for the callback.\n   * @returns {Mixed} Returns the value that passed the callback check, else `undefined`.\n   * @example\n   *\n   * var even = _.find([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n   * // => 2\n   */\n  var find = iterationFactory(forEachFactoryOptions, {\n    'inLoop': 'if(callback(collection[index],index,collection))return collection[index]'\n  });\n\n  /**\n   * Iterates over a `collection`, executing the `callback` for each value in the\n   * `collection`. The `callback` is bound to the `thisArg` value, if one is passed.\n   * The `callback` is invoked with 3 arguments; for arrays they are\n   * (value, index, array) and for objects they are (value, key, object).\n   *\n   * @static\n   * @memberOf _\n   * @alias each\n   * @category Collections\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} callback The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding for the callback.\n   * @returns {Array|Object} Returns the `collection`.\n   * @example\n   *\n   * _.forEach([1, 2, 3], function(num) { alert(num); });\n   * // => alerts each number in turn...\n   *\n   * _.forEach({ 'one': 1, 'two': 2, 'three': 3}, function(num) { alert(num); });\n   * // => alerts each number in turn...\n   */\n  var forEach = iterationFactory(forEachFactoryOptions);\n\n  /**\n   * Splits a `collection` into sets, grouped by the result of running each value\n   * through `callback`. The `callback` is invoked with 3 arguments; for arrays\n   * they are (value, index, array) and for objects they are (value, key, object).\n   * The `callback` argument may also be the name of a property to group by.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function|String} callback The function called per iteration or\n   *  property name to group by.\n   * @param {Mixed} [thisArg] The `this` binding for the callback.\n   * @returns {Object} Returns an object of grouped values.\n   * @example\n   *\n   * _.groupBy([1.3, 2.1, 2.4], function(num) { return Math.floor(num); });\n   * // => { '1': [1.3], '2': [2.1, 2.4] }\n   *\n   * _.groupBy(['one', 'two', 'three'], 'length');\n   * // => { '3': ['one', 'two'], '5': ['three'] }\n   */\n  function groupBy(collection, callback, thisArg) {\n    var result = {};\n    if (!isFunction(callback)) {\n      var prop = callback;\n      callback = function(collection) { return collection[prop]; };\n    }\n    forEach(collection, function(value, index, collection) {\n      var prop = callback(value, index, collection);\n      (result[prop] || (result[prop] = [])).push(value);\n    });\n    return result;\n  }\n\n  /**\n   * Calls the method named by `methodName` for each value of the `collection`.\n   * Additional arguments will be passed to each invoked method.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {String} methodName The name of the method to invoke.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to invoke the method with.\n   * @returns {Array} Returns a new array of values returned from each invoked method.\n   * @example\n   *\n   * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');\n   * // => [[1, 5, 7], [1, 2, 3]]\n   */\n  function invoke(collection, methodName) {\n    var args = slice.call(arguments, 2),\n        isFunc = isFunction(methodName);\n\n    return map(collection, function(value) {\n      return (isFunc ? methodName || value : value[methodName]).apply(value, args);\n    });\n  }\n\n  /**\n   * Produces a new array of values by mapping each value in the `collection`\n   * through a transformation `callback`. The `callback` is bound to the `thisArg`\n   * value, if one is passed. The `callback` is invoked with 3 arguments; for\n   * arrays they are (value, index, array) and for objects they are (value, key, object).\n   *\n   * @static\n   * @memberOf _\n   * @alias collect\n   * @category Collections\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} callback The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding for the callback.\n   * @returns {Array} Returns a new array of values returned by the callback.\n   * @example\n   *\n   * _.map([1, 2, 3], function(num) { return num * 3; });\n   * // => [3, 6, 9]\n   *\n   * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { return num * 3; });\n   * // => [3, 6, 9]\n   */\n  var map = iterationFactory(forEachFactoryOptions, mapFactoryOptions);\n\n  /**\n   * Retrieves the maximum value of a `collection`. If `callback` is passed,\n   * it will be executed for each value in the `collection` to generate the\n   * criterion by which the value is ranked. The `callback` is invoked with 3\n   * arguments; for arrays they are (value, index, array) and for objects they\n   * are (value, key, object).\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} [callback] The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding for the callback.\n   * @returns {Mixed} Returns the maximum value.\n   * @example\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 },\n   *   { 'name': 'curly', 'age': 60 }\n   * ];\n   *\n   * _.max(stooges, function(stooge) { return stooge.age; });\n   * // => { 'name': 'curly', 'age': 60 };\n   */\n  var max = iterationFactory(forEachFactoryOptions, maxFactoryOptions);\n\n  /**\n   * Retrieves the minimum value of a `collection`. If `callback` is passed,\n   * it will be executed for each value in the `collection` to generate the\n   * criterion by which the value is ranked. The `callback` is invoked with 3\n   * arguments; for arrays they are (value, index, array) and for objects they\n   * are (value, key, object).\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} [callback] The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding for the callback.\n   * @returns {Mixed} Returns the minimum value.\n   * @example\n   *\n   * _.min([10, 5, 100, 2, 1000]);\n   * // => 2\n   */\n  var min = iterationFactory(forEachFactoryOptions, maxFactoryOptions, {\n    'top': maxFactoryOptions.top.replace('-', '').replace('max', 'min'),\n    'inLoop': maxFactoryOptions.inLoop.replace('>=', '<')\n  });\n\n  /**\n   * Retrieves the value of a specified property from all values in a `collection`.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {String} property The property to pluck.\n   * @returns {Array} Returns a new array of property values.\n   * @example\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 },\n   *   { 'name': 'curly', 'age': 60 }\n   * ];\n   *\n   * _.pluck(stooges, 'name');\n   * // => ['moe', 'larry', 'curly']\n   */\n  var pluck = iterationFactory(mapFactoryOptions, {\n    'args': 'collection,property',\n    'inLoop': {\n      'array': 'result[index]=collection[index][property]',\n      'object': 'result[result.length]=collection[index][property]'\n    }\n  });\n\n  /**\n   * Boils down a `collection` to a single value. The initial state of the\n   * reduction is `accumulator` and each successive step of it should be returned\n   * by the `callback`. The `callback` is bound to the `thisArg` value, if one is\n   * passed. The `callback` is invoked with 4 arguments; for arrays they are\n   * (accumulator, value, index, array) and for objects they are\n   * (accumulator, value, key, object).\n   *\n   * @static\n   * @memberOf _\n   * @alias foldl, inject\n   * @category Collections\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} callback The function called per iteration.\n   * @param {Mixed} [accumulator] Initial value of the accumulator.\n   * @param {Mixed} [thisArg] The `this` binding for the callback.\n   * @returns {Mixed} Returns the accumulated value.\n   * @example\n   *\n   * var sum = _.reduce([1, 2, 3], function(memo, num) { return memo + num; });\n   * // => 6\n   */\n  var reduce = iterationFactory({\n    'args':\n      'collection,callback,accumulator,thisArg',\n    'top':\n      'var initial=arguments.length>2;\\n' +\n      'if(thisArg)callback=bind(callback,thisArg)',\n    'init':\n      'accumulator',\n    'beforeLoop': {\n      'array': 'if(!initial)result=collection[++index]'\n    },\n    'inLoop': {\n      'array':\n        'result=callback(result,collection[index],index,collection)',\n      'object':\n        'result=initial\\n' +\n          '?callback(result,collection[index],index,collection)\\n' +\n          ':(initial=true,collection[index])'\n    }\n  });\n\n  /**\n   * The right-associative version of `_.reduce`. The `callback` is bound to the\n   * `thisArg` value, if one is passed. The `callback` is invoked with 4 arguments;\n   * for arrays they are (accumulator, value, index, array) and for objects they\n   * are (accumulator, value, key, object).\n   *\n   * @static\n   * @memberOf _\n   * @alias foldr\n   * @category Collections\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} callback The function called per iteration.\n   * @param {Mixed} [accumulator] Initial value of the accumulator.\n   * @param {Mixed} [thisArg] The `this` binding for the callback.\n   * @returns {Mixed} Returns the accumulated value.\n   * @example\n   *\n   * var list = [[0, 1], [2, 3], [4, 5]];\n   * var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);\n   * // => [4, 5, 2, 3, 0, 1]\n   */\n  function reduceRight(collection, callback, result, thisArg) {\n    var initial = arguments.length > 2;\n    if (collection == undefined) {\n      return result;\n    }\n    if(thisArg) {\n      callback = bind(callback, thisArg);\n    }\n    var length = collection.length;\n    if (length === +length) {\n      if (length && !initial) {\n        result = collection[--length];\n      }\n      while (length--) {\n        result = callback(result, collection[length], length, collection);\n      }\n      return result;\n    }\n\n    var prop,\n        props = keys(collection);\n\n    length = props.length;\n    if (length && !initial) {\n      result = collection[props[--length]];\n    }\n    while (length--) {\n      prop = props[length];\n      result = callback(result, collection[prop], prop, collection);\n    }\n    return result;\n  }\n\n  /**\n   * The opposite of `_.filter`, this method returns the values of a `collection`\n   * that `callback` does **not** return truthy for. The `callback` is invoked\n   * with 3 arguments; for arrays they are (value, index, array) and for objects\n   * they are (value, key, object).\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} callback The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding for the callback.\n   * @returns {Array} Returns a new array of values that did **not** pass the callback check.\n   * @example\n   *\n   * var odds = _.reject([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n   * // => [1, 3, 5]\n   */\n  var reject = iterationFactory(forEachFactoryOptions, filterFactoryOptions, {\n    'inLoop': '!' + filterFactoryOptions.inLoop\n  });\n\n  /**\n   * Produces a new array of shuffled `collection` values, using a version of the\n   * Fisher-Yates shuffle. See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object} collection The collection to shuffle.\n   * @returns {Array} Returns a new shuffled array.\n   * @example\n   *\n   * _.shuffle([1, 2, 3, 4, 5, 6]);\n   * // => [4, 1, 6, 3, 5, 2]\n   */\n  function shuffle(collection) {\n    var rand,\n        result = [];\n\n    forEach(collection, function(value, index) {\n      rand = Math.floor(Math.random() * (index + 1));\n      result[index] = result[rand];\n      result[rand] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Gets the number of values in the `collection`.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object} collection The collection inspect.\n   * @returns {Number} Returns the number of values in the collection.\n   * @example\n   *\n   * _.size({ 'one': 1, 'two': 2, 'three': 3 });\n   * // => 3\n   */\n  function size(collection) {\n    var className = toString.call(collection);\n    return className == arrayClass || className == stringClass\n      ? collection.length\n      : keys(collection).length;\n  }\n\n  /**\n   * Produces a new sorted array, ranked in ascending order by the results of\n   * running each value of a `collection` through `callback`. The `callback` is\n   * invoked with 3 arguments; for arrays they are (value, index, array) and for\n   * objects they are (value, key, object). The `callback` argument may also be\n   * the name of a property to sort by (e.g. 'length').\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function|String} callback The function called per iteration or\n   *  property name to sort by.\n   * @param {Mixed} [thisArg] The `this` binding for the callback.\n   * @returns {Array} Returns a new array of sorted values.\n   * @example\n   *\n   * _.sortBy([1, 2, 3, 4, 5, 6], function(num) { return Math.sin(num); });\n   * // => [5, 4, 6, 3, 1, 2]\n   */\n  function sortBy(collection, callback, thisArg) {\n    if (!isFunction(callback)) {\n      var prop = callback;\n      callback = function(collection) { return collection[prop]; };\n    } else if (thisArg) {\n      callback = bind(callback, thisArg);\n    }\n    return pluck(map(collection, function(value, index) {\n      return {\n        'criteria': callback(value, index, collection),\n        'value': value\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria,\n          b = right.criteria;\n\n      if (a === undefined) {\n        return 1;\n      }\n      if (b === undefined) {\n        return -1;\n      }\n      return a < b ? -1 : a > b ? 1 : 0;\n    }), 'value');\n  }\n\n  /**\n   * Checks if the `callback` returns truthy for **any** value of a `collection`.\n   * The function returns as soon as it finds passing value, and does not iterate\n   * over the entire `collection`. The `callback` is invoked with 3 arguments; for\n   * arrays they are (value, index, array) and for objects they are\n   * (value, key, object).\n   *\n   * @static\n   * @memberOf _\n   * @alias any\n   * @category Collections\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} callback The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding for the callback.\n   * @returns {Boolean} Returns `true` if any value passes the callback check, else `false`.\n   * @example\n   *\n   * _.some([null, 0, 'yes', false]);\n   * // => true\n   */\n  var some = iterationFactory(forEachFactoryOptions, everyFactoryOptions, {\n    'init': 'false',\n    'inLoop': everyFactoryOptions.inLoop.replace('!', '')\n  });\n\n  /**\n   * Uses a binary search to determine the smallest  index at which the `value`\n   * should be inserted into the `collection` in order to maintain the sort order\n   * of the `collection`. If `callback` is passed, it will be executed for each\n   * value in the `collection` to compute their sort ranking. The `callback` is\n   * invoked with 1 argument.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array} array The array to iterate over.\n   * @param {Mixed} value The value to evaluate.\n   * @param {Function} [callback] The function called per iteration.\n   * @returns {Number} Returns the index at which the value should be inserted\n   *  into the collection.\n   * @example\n   *\n   * _.sortedIndex([10, 20, 30, 40, 50], 35);\n   * // => 3\n   */\n  function sortedIndex(array, object, callback) {\n    var low = 0,\n        high = array.length;\n\n    callback || (callback = identity);\n    while (low < high) {\n      var mid = (low + high) >> 1;\n      callback(array[mid]) < callback(object) ? (low = mid + 1) : (high = mid);\n    }\n    return low;\n  }\n\n  /**\n   * Converts the `collection`, into an array. Useful for converting the\n   * `arguments` object.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object} collection The collection to convert.\n   * @returns {Array} Returns the new converted array.\n   * @example\n   *\n   * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);\n   * // => [2, 3, 4]\n   */\n  function toArray(collection) {\n    if (!collection) {\n      return [];\n    }\n    if (isFunction(collection.toArray)) {\n      return collection.toArray();\n    }\n    var length = collection.length;\n    if (length === +length) {\n      return slice.call(collection);\n    }\n    return values(collection);\n  }\n\n  /**\n   * Produces an array of enumerable own property values of the `collection`.\n   *\n   * @static\n   * @memberOf _\n   * @alias methods\n   * @category Collections\n   * @param {Array|Object} collection The collection to inspect.\n   * @returns {Array} Returns a new array of property values.\n   * @example\n   *\n   * _.values({ 'one': 1, 'two': 2, 'three': 3 });\n   * // => [1, 2, 3]\n   */\n  var values = iterationFactory(mapFactoryOptions, {\n    'args': 'collection',\n    'inLoop': {\n      'array': 'result[index]=collection[index]',\n      'object': 'result[result.length]=collection[index]'\n    }\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Produces a new array with all falsey values of `array` removed. The values\n   * `false`, `null`, `0`, `\"\"`, `undefined` and `NaN` are all falsey.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to compact.\n   * @returns {Array} Returns a new filtered array.\n   * @example\n   *\n   * _.compact([0, 1, false, 2, '', 3]);\n   * // => [1, 2, 3]\n   */\n  var compact = iterationFactory({\n    'args': 'array',\n    'init': '[]',\n    'inLoop': 'if(array[index])result.push(array[index])'\n  });\n\n  /**\n   * Produces a new array of `array` values not present in the other arrays\n   * using strict equality for comparisons, i.e. `===`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to process.\n   * @param {Mixed} [array1, array2, ...] Arrays to check.\n   * @returns {Array} Returns a new array of `array` values not present in the\n   *  other arrays.\n   * @example\n   *\n   * _.difference([1, 2, 3, 4, 5], [5, 2, 10]);\n   * // => [1, 3, 4]\n   */\n  var difference = iterationFactory(differenceFactoryOptions);\n\n  /**\n   * Gets the first value of the `array`. Pass `n` to return the first `n` values\n   * of the `array`.\n   *\n   * @static\n   * @memberOf _\n   * @alias head, take\n   * @category Arrays\n   * @param {Array} array The array to query.\n   * @param {Number} [n] The number of elements to return.\n   * @param {Object} [guard] Internally used to allow this method to work with\n   *  others like `_.map` without using their callback `index` argument for `n`.\n   * @returns {Mixed} Returns the first value or an array of the first `n` values\n   *  of the `array`.\n   * @example\n   *\n   * _.first([5, 4, 3, 2, 1]);\n   * // => 5\n   */\n  function first(array, n, guard) {\n    return (n == undefined || guard) ? array[0] : slice.call(array, 0, n);\n  }\n\n  /**\n   * Flattens a nested array (the nesting can be to any depth). If `shallow` is\n   * truthy, `array` will only be flattened a single level.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to compact.\n   * @param {Boolean} shallow A flag to indicate only flattening a single level.\n   * @returns {Array} Returns a new flattened array.\n   * @example\n   *\n   * _.flatten([1, [2], [3, [[4]]]]);\n   * // => [1, 2, 3, 4];\n   *\n   * _.flatten([1, [2], [3, [[4]]]], true);\n   * // => [1, 2, 3, [[4]]];\n   */\n  function flatten(array, shallow) {\n    if (shallow) {\n      return concat.apply([], array);\n    }\n    return reduce(array, function(accumulator, value) {\n      if (isArray(value)) {\n        push.apply(accumulator, flatten(value));\n        return accumulator;\n      }\n      accumulator.push(value);\n      return accumulator;\n    }, []);\n  }\n\n  /**\n   * Gets the index at which the first occurrence of `value` is found using\n   * strict equality for comparisons, i.e. `===`. If the `array` is already\n   * sorted, passing `true` for `isSorted` will run a faster binary search.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to search.\n   * @param {Mixed} value The value to search for.\n   * @param {Boolean} [isSorted=false] A flag to indicate that the `array` is already sorted.\n   * @returns {Number} Returns the index of the matched value or `-1`.\n   * @example\n   *\n   * _.indexOf([1, 2, 3], 2);\n   * // => 1\n   */\n  function indexOf(array, value, isSorted) {\n    var index, length;\n    if (array == undefined) {\n      return -1;\n    }\n    if (isSorted) {\n      index = sortedIndex(array, value);\n      return array[index] === value ? index : -1;\n    }\n    for (index = 0, length = array.length; index < length; index++) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Gets all but the last value of the `array`. Pass `n` to exclude the last `n`\n   * values from the result.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to query.\n   * @param {Number} [n] The number of elements to return.\n   * @param {Object} [guard] Internally used to allow this method to work with\n   *  others like `_.map` without using their callback `index` argument for `n`.\n   * @returns {Array} Returns all but the last value or `n` values of the `array`.\n   * @example\n   *\n   * _.initial([5, 4, 3, 2, 1]);\n   * // => [5, 4, 3, 2]\n   */\n  function initial(array, n, guard) {\n    return slice.call(array, 0, -((n == undefined || guard) ? 1 : n));\n  }\n\n  /**\n   * Computes the intersection of all the passed-in arrays.\n   *\n   * @static\n   * @memberOf _\n   * @alias intersect\n   * @category Arrays\n   * @param {Mixed} [array1, array2, ...] Arrays to process.\n   * @returns {Array} Returns a new array of unique values, in order, that are\n   *  present in **all** of the arrays.\n   * @example\n   *\n   * _.intersection([1, 2, 3], [101, 2, 1, 10], [2, 1]);\n   * // => [1, 2]\n   */\n  function intersection(array) {\n    var rest = slice.call(arguments, 1);\n    return filter(uniq(array), function(value) {\n      return every(rest, function(other) {\n        return indexOf(other, value) >= 0;\n      });\n    });\n  }\n\n  /**\n   * Gets the last value of the `array`. Pass `n` to return the lasy `n` values\n   * of the `array`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to query.\n   * @param {Number} [n] The number of elements to return.\n   * @param {Object} [guard] Internally used to allow this method to work with\n   *  others like `_.map` without using their callback `index` argument for `n`.\n   * @returns {Array} Returns all but the last value or `n` values of the `array`.\n   * @example\n   *\n   * _.last([5, 4, 3, 2, 1]);\n   * // => 1\n   */\n  function last(array, n, guard) {\n    var length = array.length;\n    return (n == undefined || guard) ? array[length - 1] : slice.call(array, -n || length);\n  }\n\n  /**\n   * Gets the index at which the last occurrence of `value` is found using\n   * strict equality for comparisons, i.e. `===`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to search.\n   * @param {Mixed} value The value to search for.\n   * @returns {Number} Returns the index of the matched value or `-1`.\n   * @example\n   *\n   * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);\n   * // => 4\n   */\n  function lastIndexOf(array, value) {\n    if (array == undefined) {\n      return -1;\n    }\n    var index = array.length;\n    while (index--) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Creates an array of numbers (positive and/or negative) progressing from\n   * `start` up to but not including `stop`. This method is a port of Python's\n   * `range()` function. See http://docs.python.org/library/functions.html#range.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Number} [start=0] The start of the range.\n   * @param {Number} end The end of the range.\n   * @param {Number} [step=1] The value to increment or descrement by.\n   * @returns {Array} Returns a new range array.\n   * @example\n   *\n   * _.range(10);\n   * // => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n   *\n   * _.range(1, 11);\n   * // => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n   *\n   * _.range(0, 30, 5);\n   * // => [0, 5, 10, 15, 20, 25]\n   *\n   * _.range(0, -10, -1);\n   * // => [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n   *\n   * _.range(0);\n   * // => []\n   */\n  function range(start, end, step) {\n    step || (step = 1);\n    if (arguments.length < 2) {\n      end = start || 0;\n      start = 0;\n    }\n\n    var index = -1,\n        length = Math.max(Math.ceil((end - start) / step), 0),\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = start;\n      start += step;\n    }\n    return result;\n  }\n\n  /**\n   * The opposite of `_.initial`, this method gets all but the first value of\n   * the `array`. Pass `n` to exclude the first `n` values from the result.\n   *\n   * @static\n   * @memberOf _\n   * @alias tail\n   * @category Arrays\n   * @param {Array} array The array to query.\n   * @param {Number} [n] The number of elements to return.\n   * @param {Object} [guard] Internally used to allow this method to work with\n   *  others like `_.map` without using their callback `index` argument for `n`.\n   * @returns {Array} Returns all but the first value or `n` values of the `array`.\n   * @example\n   *\n   * _.rest([5, 4, 3, 2, 1]);\n   * // => [4, 3, 2, 1]\n   */\n  function rest(array, n, guard) {\n    return slice.call(array, (n == undefined || guard) ? 1 : n);\n  }\n\n  /**\n   * Computes the union of the passed-in arrays.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Mixed} [array1, array2, ...] Arrays to process.\n   * @returns {Array} Returns a new array of unique values, in order, that are\n   *  present in one or more of the arrays.\n   * @example\n   *\n   * _.union([1, 2, 3], [101, 2, 1, 10], [2, 1]);\n   * // => [1, 2, 3, 101, 10]\n   */\n  function union() {\n    return uniq(flatten(arguments, true));\n  }\n\n  /**\n   * Produces a duplicate-value-free version of the `array` using strict equality\n   * for comparisons, i.e. `===`. If the `array` is already sorted, passing `true`\n   * for `isSorted` will run a faster algorithm. If `callback` is passed,\n   * each value of `array` is passed through a transformation `callback` before\n   * uniqueness is computed. The `callback` is invoked with 3 arguments;\n   * (value, index, array).\n   *\n   * @static\n   * @memberOf _\n   * @alias unique\n   * @category Arrays\n   * @param {Array} array The array to process.\n   * @param {Boolean} [isSorted=false] A flag to indicate that the `array` is already sorted.\n   * @param {Function} [callback] A\n   * @returns {Array} Returns a duplicate-value-free array.\n   * @example\n   *\n   * _.uniq([1, 2, 1, 3, 1, 4]);\n   * // => [1, 2, 3, 4]\n   */\n  function uniq(array, isSorted, callback) {\n    var initial = callback ? map(array, callback) : array,\n        result = [];\n\n    // the `isSorted` flag is irrelevant if the array only contains two elements.\n    if (array.length < 3) {\n      isSorted = true;\n    }\n    reduce(initial, function(accumulator, value, index) {\n      if (isSorted ? last(accumulator) !== value || !accumulator.length : indexOf(accumulator, value) < 0) {\n        accumulator.push(value);\n        result.push(array[index]);\n      }\n      return accumulator;\n    }, []);\n\n    return result;\n  }\n\n  /**\n   * Produces a new array with all occurrences of the values removed using strict\n   * equality for comparisons, i.e. `===`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to filter.\n   * @param {Mixed} [value1, value2, ...] Values to remove.\n   * @returns {Array} Returns a new filtered array.\n   * @example\n   *\n   * _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);\n   * // => [2, 3, 4]\n   */\n  var without = iterationFactory(differenceFactoryOptions, {\n    'top': 'var values=slice.call(arguments,1)',\n    'init': '[]'\n  });\n\n  /**\n   * Merges together the values of each of the arrays with the value at the\n   * corresponding position. Useful for separate data sources that are coordinated\n   * through matching array indexes. For a matrix of nested arrays, `_.zip.apply(...)`\n   * can transpose the matrix in a similar fashion.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Mixed} [array1, array2, ...] Arrays to process.\n   * @returns {Array} Returns a new array of merged arrays.\n   * @example\n   *\n   * _.zip(['moe', 'larry', 'curly'], [30, 40, 50], [true, false, false]);\n   * // => [['moe', 30, true], ['larry', 40, false], ['curly', 50, false]]\n   */\n  function zip() {\n    var index = -1,\n        length = max(pluck(arguments, 'length')),\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = pluck(arguments, index);\n    }\n    return result;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Creates a new function that is restricted to executing only after it is\n   * called a given number of `times`.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Number} times The number of times the function must be called before\n   * it is executed.\n   * @param {Function} func The function to restrict.\n   * @returns {Function} Returns the new restricted function.\n   * @example\n   *\n   * var renderNotes = _.after(notes.length, render);\n   * _.forEach(notes, function(note) {\n   *   note.asyncSave({ 'success': renderNotes });\n   * });\n   * // renderNotes is run once, after all notes have saved.\n   */\n  function after(times, func) {\n    if (times < 1) {\n      return func();\n    }\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  }\n\n  /**\n   * Creates a new function that, when called, invokes `func` with the `this`\n   * binding of `thisArg` and prepends additional arguments to those passed to\n   * the bound function.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to bind.\n   * @param @param {Mixed} [thisArg] The `this` binding of `func`.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to prepend to those passed to the bound function.\n   * @returns {Function} Returns the new bound function.\n   * @example\n   *\n   * var func = function(greeting) { return greeting + ': ' + this.name; };\n   * func = _.bind(func, { 'name': 'moe' }, 'hi');\n   * func();\n   * // => 'hi: moe'\n   */\n  function bind(func, thisArg) {\n    var args = slice.call(arguments, 2),\n        argsLength = args.length;\n\n    return function() {\n      args.length = argsLength;\n      push.apply(args, arguments);\n      return func.apply(thisArg, args);\n    };\n  }\n\n  /**\n   * Binds methods on the `object` to the object, overwriting the non-bound method.\n   * If no method names are provided, all the function properties of the `object`\n   * will be bound.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Object} object The object to bind and assign the bound methods to.\n   * @param {Mixed} [methodName1, methodName2, ...] Method names on the object to bind.\n   * @returns {Object} Returns the `object`.\n   * @example\n   *\n   * var buttonView = {\n   *  'label': 'lodash',\n   *  'onClick': function() { alert('clicked: ' + this.label); },\n   *  'onHover': function() { console.log('hovering: ' + this.label); }\n   * };\n   *\n   * _.bindAll(buttonView);\n   * jQuery('#lodash_button').on('click', buttonView.onClick);\n   * // => When the button is clicked, `this.label` will have the correct value\n   */\n  function bindAll(object) {\n    var funcs = arguments,\n        index = 1;\n\n    if (funcs.length == 1) {\n      index = 0;\n      funcs = functions(object);\n    }\n    for (var length = funcs.length; index < length; index++) {\n      object[funcs[index]] = bind(object[funcs[index]], object);\n    }\n    return object;\n  }\n\n  /**\n   * Creates a new function that is the composition of the passed functions,\n   * where each function consumes the return value of the function that follows.\n   * In math terms, composing thefunctions `f()`, `g()`, and `h()` produces `f(g(h()))`.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Mixed} [func1, func2, ...] Functions to compose.\n   * @returns {Function} Returns the new composed function.\n   * @example\n   *\n   * var greet = function(name) { return 'hi: ' + name; };\n   * var exclaim = function(statement) { return statement + '!'; };\n   * var welcome = _.compose(exclaim, greet);\n   * welcome('moe');\n   * // => 'hi: moe!'\n   */\n  function compose() {\n    var funcs = arguments;\n    return function() {\n      var args = arguments,\n          length = funcs.length;\n\n      while (length--) {\n        args = [funcs[length].apply(this, args)];\n      }\n      return args[0];\n    };\n  }\n\n  /**\n   * Creates a new function that will postpone its execution until after `wait`\n   * milliseconds have elapsed since the last time it was invoked. Pass `true`\n   * for `immediate` to cause debounce to invoke the function on the leading,\n   * instead of the trailing, edge of the `wait` timeout.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to debounce.\n   * @param {Number} wait The number of milliseconds to postone.\n   * @param {Boolean} immediate A flag to indicate execution is on the leading\n   *  edge of the timeout.\n   * @returns {Function} Returns the new debounced function.\n   * @example\n   *\n   * var lazyLayout = _.debounce(calculateLayout, 300);\n   * jQuery(window).on('resize', lazyLayout);\n   */\n  function debounce(func, wait, immediate) {\n    var timeout;\n    return function() {\n      var args = arguments,\n          thisArg = this;\n\n      if (immediate && !timeout) {\n        func.apply(thisArg, args);\n      }\n      clearTimeout(timeout);\n      timeout = setTimeout(function() {\n        timeout = undefined;\n        if (!immediate) {\n          func.apply(thisArg, args);\n        }\n      }, wait);\n    };\n  }\n\n  /**\n   * Invokes the `func` function after `wait` milliseconds. Additional arguments\n   * are passed `func` when it is invoked.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to delay.\n   * @param {Number} wait The number of milliseconds to delay execution.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to invoke the function with.\n   * @returns {Number} Returns the `setTimeout` timeout id.\n   * @example\n   *\n   * var log = _.bind(console.log, console);\n   * _.delay(log, 1000, 'logged later');\n   * // => 'logged later' (Appears after one second.)\n   */\n  function delay(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function() { return func.apply(undefined, args); }, wait);\n  }\n\n  /**\n   * Defers invoking the `func` function until the current call stack has cleared.\n   * Additional arguments are passed to `func` when it is invoked.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to defer.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to invoke the function with.\n   * @returns {Number} Returns the `setTimeout` timeout id.\n   * @example\n   *\n   * _.defer(function() { alert('deferred'); });\n   * // Returns from the function before the alert runs.\n   */\n  function defer(func) {\n    var args = slice.call(arguments, 1);\n    return setTimeout(function() { return func.apply(undefined, args); }, 1);\n  }\n\n  /**\n   * Creates a new function that memoizes the result of `func`. If `resolver` is\n   * passed, it will be used to determine the cache key for storing the result\n   * based on the arguments passed to the memoized function. By default, the first\n   * argument passed to the memoized function is used as the cache key.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to have its output memoized.\n   * @param {Function} [resolver] A function used to resolve the cache key.\n   * @returns {Function} Returns the new memoizing function.\n   * @example\n   *\n   * var fibonacci = _.memoize(function(n) {\n   *   return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);\n   * });\n   */\n  function memoize(func, resolver) {\n    var cache = {};\n    return function() {\n      var prop = resolver ? resolver.apply(this, arguments) : arguments[0];\n      return hasOwnProperty.call(cache, prop)\n        ? cache[prop]\n        : (cache[prop] = func.apply(this, arguments));\n    };\n  }\n\n  /**\n   * Creates a new function that is restricted to one execution. Repeat calls to\n   * the function will return the value of the first call.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to restrict.\n   * @returns {Function} Returns the new restricted function.\n   * @example\n   *\n   * var initialize = _.once(createApplication);\n   * initialize();\n   * initialize();\n   * // Application is only created once.\n   */\n  function once(func) {\n    var result,\n        ran = false;\n\n    return function() {\n      if (ran) {\n        return result;\n      }\n      ran = true;\n      result = func.apply(this, arguments);\n      return result;\n    };\n  }\n\n  /**\n   * Creates a new function that, when invoked, will only call the original\n   * function at most once per every `wait` milliseconds.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to throttle.\n   * @param {Number} wait The number of milliseconds to throttle executions to.\n   * @returns {Function} Returns the new throttled function.\n   * @example\n   *\n   * var throttled = _.throttle(updatePosition, 100);\n   * jQuery(window).on('scroll', throttled);\n   */\n  function throttle(func, wait) {\n    var args, more, result, thisArg, throttling, timeout,\n        whenDone = debounce(function() { more = throttling = false; }, wait);\n\n    return function() {\n      args = arguments;\n      thisArg = this;\n\n      if (!timeout) {\n        timeout = setTimeout(function() {\n          timeout = undefined;\n          if (more) {\n            func.apply(thisArg, args);\n          }\n          whenDone();\n        }, wait);\n      }\n      if (throttling) {\n        more = true;\n      } else {\n        result = func.apply(thisArg, args);\n      }\n      whenDone();\n      throttling = true;\n      return result;\n    };\n  }\n\n  /**\n   * Create a new function that passes the `func` function to the `wrapper`\n   * function as its first argument. Additional arguments are appended to those\n   * passed to the `wrapper` function.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to wrap.\n   * @param {Function} wrapper The wrapper function.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to append to those passed to the wrapper.\n   * @returns {Function} Returns the new function.\n   * @example\n   *\n   * var hello = function(name) { return 'hello: ' + name; };\n   * hello = _.wrap(hello, function(func) {\n   *   return 'before, ' + func('moe') + ', after';\n   * });\n   * hello();\n   * // => 'before, hello: moe, after'\n   */\n  function wrap(func, wrapper) {\n    return function() {\n      var args = [func];\n      push.apply(args, arguments);\n      return wrapper.apply(this, args);\n    };\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a shallow clone of the `value`. Any nested objects or arrays will be\n   * assigned by reference and not cloned.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to clone.\n   * @returns {Mixed} Returns the cloned `value`.\n   * @example\n   *\n   * _.clone({ 'name': 'moe' });\n   * // => { 'name': 'moe' };\n   */\n  function clone(value) {\n    if (value !== Object(value)) {\n      return value;\n    }\n    return isArray(value) ? value.slice() : extend({}, value);\n  }\n\n  /**\n   * Assigns missing properties in `object` with default values from the defaults\n   * objects. As soon as a property is set, additional defaults of the same\n   * property will be ignored.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The object to populate.\n   * @param {Object} [defaults1, defaults2, ..] The defaults objects to apply to `object`.\n   * @returns {Object} Returns `object`.\n   * @example\n   *\n   * var iceCream = { 'flavor': 'chocolate' };\n   * _.defaults(iceCream, { 'flavor': 'vanilla', 'sprinkles': 'lots' });\n   * // => { 'flavor': 'chocolate', 'sprinkles': 'lots' }\n   */\n  var defaults = iterationFactory(extendFactoryOptions, {\n    'inLoop': 'if(object[index]==undefined)' + extendFactoryOptions.inLoop\n  });\n\n  /**\n   * Copies enumerable properties from the source objects to the `destination` object.\n   * Subsequent sources will overwrite propery assignments of previous sources.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The destination object.\n   * @param {Object} [source1, source2, ..] The source objects.\n   * @returns {Object} Returns the destination object.\n   * @example\n   *\n   * _.extend({ 'name': 'moe' }, { 'age': 40 });\n   * // => { 'name': 'moe', 'age': 40 }\n   */\n  var extend = iterationFactory(extendFactoryOptions);\n\n  /**\n   * Produces a sorted array of the properties, own and inherited, of `object`\n   * that have function values.\n   *\n   * @static\n   * @memberOf _\n   * @alias methods\n   * @category Objects\n   * @param {Object} object The object to inspect.\n   * @returns {Array} Returns a new array of property names that have function values.\n   * @example\n   *\n   * _.functions(_);\n   * // => ['all', 'any', 'bind', 'bindAll', 'clone', 'compact', 'compose', ...]\n   */\n  var functions = iterationFactory(keysFactoryOptions, {\n    'top': '',\n    'useHas': false,\n    'inLoop': 'if(toString.call(object[index])==funcClass)result.push(index)',\n    'returns': 'result.sort()'\n  });\n\n  /**\n   * Checks if the specified object `property` exists and is a direct property,\n   * instead of an inherited property.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The object to check.\n   * @param {String} property The property to check for.\n   * @returns {Boolean} Returns `true` if key is a direct property, else `false`.\n   * @example\n   *\n   * _.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');\n   * // => true\n   */\n  function has(object, prop) {\n    return hasOwnProperty.call(object, prop);\n  }\n\n  /**\n   * Checks if a `value` is an `arguments` object.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is an `arguments` object, else `false`.\n   * @example\n   *\n   * (function() { return _.isArguments(arguments); })(1, 2, 3);\n   * // => true\n   *\n   * _.isArguments([1, 2, 3]);\n   * // => false\n   */\n  var isArguments = function isArguments(value) {\n    return toString.call(value) == '[object Arguments]';\n  };\n  // fallback for browser like IE<9 which detect `arguments` as `[object Object]`\n  if (!isArguments(arguments)) {\n    isArguments = function isArguments(value) {\n      return !!(value && hasOwnProperty.call(value, 'callee'));\n    };\n  }\n\n  /**\n   * Checks if a `value` is a boolean (`true` or `false`) value.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is a boolean value, else `false`.\n   * @example\n   *\n   * _.isBoolean(null);\n   * // => false\n   */\n  function isBoolean(value) {\n    return value === true || value === false || toString.call(value) == boolClass;\n  }\n\n  /**\n   * Checks if a `value` is a date.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is a date, else `false`.\n   * @example\n   *\n   * _.isDate(new Date);\n   * // => true\n   */\n  function isDate(value) {\n    return toString.call(value) == dateClass;\n  }\n\n  /**\n   * Checks if a `value` is a DOM element.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is a DOM element, else `false`.\n   * @example\n   *\n   * _.isElement(document.body);\n   * // => true\n   */\n  function isElement(value) {\n    return !!(value && value.nodeType == 1);\n  }\n\n  /**\n   * Performs a deep comparison between two values to determine if they are\n   * equivalent to each other.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} a The value to compare.\n   * @param {Mixed} b The other value to compare.\n   * @param {Array} [stack] Internally used to keep track of \"seen\" objects to\n   *  avoid circular references.\n   * @returns {Boolean} Returns `true` if the values are equvalent, else `false`.\n   * @example\n   *\n   * var moe = { 'name': 'moe', 'luckyNumbers': [13, 27, 34] };\n   * var clone = { 'name': 'moe', 'luckyNumbers': [13, 27, 34] };\n   *\n   * moe == clone;\n   * // => false\n   *\n   * _.isEqual(moe, clone);\n   * // => true\n   */\n  function isEqual(a, b, stack) {\n    stack || (stack = []);\n\n    // exit early for identical values\n    if (a === b) {\n      // treat `+0` vs. `-0` as not equal\n      return a !== 0 || (1 / a == 1 / b);\n    }\n    // a strict comparison is necessary because `null == undefined`\n    if (a == undefined || b == undefined) {\n      return a === b;\n    }\n    // unwrap any wrapped objects\n    if (a._chain) {\n      a = a._wrapped;\n    }\n    if (b._chain) {\n      b = b._wrapped;\n    }\n    // invoke a custom `isEqual` method if one is provided\n    if (a.isEqual && isFunction(a.isEqual)) {\n      return a.isEqual(b);\n    }\n    if (b.isEqual && isFunction(b.isEqual)) {\n      return b.isEqual(a);\n    }\n    // compare [[Class]] names\n    var className = toString.call(a);\n    if (className != toString.call(b)) {\n      return false;\n    }\n    switch (className) {\n      // strings, numbers, dates, and booleans are compared by value\n      case stringClass:\n        // primitives and their corresponding object instances are equivalent;\n        // thus, `'5'` is quivalent to `new String('5')`\n        return a == String(b);\n\n      case numberClass:\n        // treat `NaN` vs. `NaN` as equal\n        return a != +a\n          ? b != +b\n          // but treat `+0` vs. `-0` as not equal\n          : (a == 0 ? (1 / a == 1 / b) : a == +b);\n\n      case boolClass:\n      case dateClass:\n        // coerce dates and booleans to numeric values, dates to milliseconds and booleans to 1 or 0;\n        // treat invalid dates coerced to `NaN` as not equal\n        return +a == +b;\n\n      // regexps are compared by their source and flags\n      case regexpClass:\n        return a.source == b.source &&\n               a.global == b.global &&\n               a.multiline == b.multiline &&\n               a.ignoreCase == b.ignoreCase;\n    }\n    if (typeof a != 'object' || typeof b != 'object') {\n      return false;\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n    var length = stack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (stack[length] == a) {\n        return true;\n      }\n    }\n\n    var result = true,\n        size = 0;\n\n    // add the first collection to the stack of traversed objects\n    stack.push(a);\n\n    // recursively compare objects and arrays\n    if (className == arrayClass) {\n      // compare array lengths to determine if a deep comparison is necessary\n      size = a.length;\n      result = size == b.length;\n\n      if (result) {\n        // deep compare the contents, ignoring non-numeric properties\n        while (size--) {\n          // ensure commutative equality for sparse arrays\n          if (!(result = size in a == size in b && isEqual(a[size], b[size], stack))) {\n            break;\n          }\n        }\n      }\n    } else {\n      // objects with different constructors are not equivalent\n      if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor) {\n        return false;\n      }\n      // deep compare objects\n      for (var prop in a) {\n        if (hasOwnProperty.call(a, prop)) {\n          // count the expected number of properties\n          size++;\n          // deep compare each member\n          if (!(result = hasOwnProperty.call(b, prop) && isEqual(a[prop], b[prop], stack))) {\n            break;\n          }\n        }\n      }\n      // ensure that both objects contain the same number of properties\n      if (result) {\n        for (prop in b) {\n          if (hasOwnProperty.call(b, prop) && !(size--)) {\n            break;\n          }\n        }\n        result = !size;\n      }\n    }\n    // remove the first collection from the stack of traversed objects\n    stack.pop();\n    return result;\n  }\n\n  /**\n   * Checks if a `value` is a finite number.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is a finite number, else `false`.\n   * @example\n   *\n   * _.isFinite(-101);\n   * // => true\n   *\n   * _.isFinite('10');\n   * // => false\n   *\n   * _.isFinite(Infinity);\n   * // => false\n   */\n  function isFinite(value) {\n    return nativeIsFinite(value) && toString.call(value) == numberClass;\n  }\n\n  /**\n   * Checks if a `value` is a function.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is a function, else `false`.\n   * @example\n   *\n   * _.isFunction(''.concat);\n   * // => true\n   */\n  function isFunction(value) {\n    return toString.call(value) == funcClass;\n  }\n\n  /**\n   * Checks if a `value` is an object.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject(1);\n   * // => false\n   */\n  function isObject(value) {\n    return value === Object(value);\n  }\n\n  /**\n   * Checks if a `value` is `NaN`.\n   * Note: this is not the same as native `isNaN`, which will return true for\n   * `undefined` and other values. See http://es5.github.com/#x15.1.2.4.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is `NaN`, else `false`.\n   * @example\n   *\n   * _.isNaN(NaN);\n   * // => true\n   *\n   * _.isNaN(new Number(NaN));\n   * // => true\n   *\n   * isNaN(undefined);\n   * // => true\n   *\n   * _.isNaN(undefined);\n   * // => false\n   */\n  function isNaN(value) {\n    // `NaN` as a primitive is the only value that is not equal to itself\n    // (perform the [[Class]] check first to avoid errors with some host objects in IE)\n    return toString.call(value) == numberClass && value != +value\n  }\n\n  /**\n   * Checks if a `value` is `null`.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is `null`, else `false`.\n   * @example\n   *\n   * _.isNull(null);\n   * // => true\n   *\n   * _.isNull(undefined);\n   * // => false\n   */\n  function isNull(value) {\n    return value === null;\n  }\n\n  /**\n   * Checks if a `value` is a number.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is a number, else `false`.\n   * @example\n   *\n   * _.isNumber(8.4 * 5;\n   * // => true\n   */\n  function isNumber(value) {\n    return toString.call(value) == numberClass;\n  }\n\n  /**\n   * Checks if a `value` is a regular expression.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is a regular expression, else `false`.\n   * @example\n   *\n   * _.isRegExp(/moe/);\n   * // => true\n   */\n  function isRegExp(value) {\n    return toString.call(value) == regexpClass;\n  }\n\n  /**\n   * Checks if a `value` is a string.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is a string, else `false`.\n   * @example\n   *\n   * _.isString('moe');\n   * // => true\n   */\n  function isString(value) {\n    return toString.call(value) == stringClass;\n  }\n\n  /**\n   * Checks if a `value` is `undefined`.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is `undefined`, else `false`.\n   * @example\n   *\n   * _.isUndefined(void 0);\n   * // => true\n   */\n  function isUndefined(value) {\n    return value === undefined;\n  }\n\n  /**\n   * Produces an array of the `object`'s enumerable own property names.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The object to inspect.\n   * @returns {Array} Returns a new array of property names.\n   * @example\n   *\n   * _.keys({ 'one': 1, 'two': 2, 'three': 3 });\n   * // => ['one', 'two', 'three']\n   */\n  var keys = nativeKeys || iterationFactory(keysFactoryOptions);\n\n  /**\n   * Creates an object composed of the specified properties. Property names may\n   * be specified as individual arguments or as arrays of property names.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The object to pluck.\n   * @param {Object} [prop1, prop2, ..] The properties to pick.\n   * @returns {Object} Returns an object composed of the picked properties.\n   * @example\n   *\n   * _.pick({ 'name': 'moe', 'age': 40, 'userid': 'moe1' }, 'name', 'age');\n   * // => { 'name': 'moe', 'age': 40 }\n   */\n  function pick(object) {\n    var prop,\n        index = -1,\n        props = flatten(slice.call(arguments, 1)),\n        length = props.length,\n        result = {};\n\n    while (++index < length) {\n      prop = props[index];\n      if (prop in object) {\n        result[prop] = object[prop];\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Invokes `interceptor` with the `value` as the first argument, and then returns\n   * `value`. The primary purpose of this method is to \"tap into\" a method chain,\n   * in order to performoperations on intermediate results within the chain.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to pass to `callback`.\n   * @param {Function} interceptor The function to invoke.\n   * @returns {Mixed} Returns `value`.\n   * @example\n   *\n   * _.chain([1,2,3,200])\n   *  .filter(function(num) { return num % 2 == 0; })\n   *  .tap(alert)\n   *  .map(function(num) { return num * num })\n   *  .value();\n   * // => // [2, 200] (alerted)\n   * // => [4, 40000]\n   */\n  function tap(value, interceptor) {\n    interceptor(value);\n    return value;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Escapes a string for insertion into HTML, replacing `&`, `<`, `>`, `\"`, `'`,\n   * and `/` characters.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {String} string The string to escape.\n   * @returns {String} Returns the escaped string.\n   * @example\n   *\n   * _.escape('Curly, Larry & Moe');\n   * // => \"Curly, Larry &amp; Moe\"\n   */\n  function escape(string) {\n    return (string + '')\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;')\n      .replace(/'/g, '&#x27;')\n      .replace(/\\//g,'&#x2F;');\n  }\n\n  /**\n   * This function simply returns the first argument passed to it.\n   * Note: It is used throughout Lo-Dash as a default callback.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {Mixed} value Any value.\n   * @returns {Mixed} Returns `value`.\n   * @example\n   *\n   * var moe = { 'name': 'moe' };\n   * moe === _.identity(moe);\n   * // => true\n   */\n  function identity(value) {\n    return value;\n  }\n\n  /**\n   * Adds functions properties of `object` to the `lodash` function and chainable\n   * wrapper.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {Object} object The object of function properties to add to `lodash`.\n   * @example\n   *\n   * _.mixin({\n   *   'capitalize': function(string) {\n   *     return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n   *   }\n   * });\n   *\n   * _.capitalize('curly');\n   * // => 'Curly'\n   *\n   * _('larry').capitalize();\n   * // => 'Larry'\n   */\n  function mixin(object) {\n    forEach(functions(object), function(methodName) {\n      var func = lodash[methodName] = object[methodName];\n\n      lodash.prototype[methodName] = function() {\n        // In Opera < 9.50 and some older/beta Mobile Safari versions using `unshift()`\n        // generically to augment the `arguments` object will pave the value at\n        // index `0` without incrimenting the other values's indexes.\n        // https://github.com/documentcloud/underscore/issues/9\n        var args = slice.call(arguments);\n        unshift.call(args, this._wrapped);\n\n        var result = func.apply(lodash, args);\n        return this._chain ? new Lodash(result).chain() : result;\n      };\n    });\n  }\n\n  /**\n   * Reverts the '_' variable to its previous value and returns a reference to\n   * the `lodash` function.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @returns {Function} Returns the `lodash` function.\n   * @example\n   *\n   * var lodash = _.noConflict();\n   */\n  function noConflict() {\n    window._ = oldDash;\n    return this;\n  }\n\n  /**\n   * Resolves the value of `property` on `object`. If the property is a function\n   * it will be invoked and its result returned, else the property value is returned.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {Object} object The object to inspect.\n   * @param {String} property The property to get the result of.\n   * @returns {Mixed} Returns the resolved.\n   * @example\n   *\n   * var object = {\n   *   'cheese': 'crumpets',\n   *   'stuff': function() {\n   *     return 'nonsense';\n   *   }\n   * };\n   *\n   * _.result(object, 'cheese');\n   * // => 'crumpets'\n   *\n   * _.result(object, 'stuff');\n   * // => 'nonsense'\n   */\n  function result(object, property) {\n    if (object == undefined) {\n      return null;\n    }\n    var value = object[property];\n    return isFunction(value) ? object[property]() : value;\n  }\n\n  /**\n   * Executes the `callback` function `n` times.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {Number} n The number of times to execute the callback.\n   * @param {Function} callback The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding for the callback.\n   * @example\n   *\n   * _.times(3, function() { genie.grantWish(); });\n   */\n  function times(n, callback, thisArg) {\n    if (thisArg) {\n      callback = bind(callback, thisArg);\n    }\n    for (var index = 0; index < n; index++) {\n      callback(index);\n    }\n  }\n\n  /**\n   * Generates a unique id. If `prefix` is passed, the id will be appended to it.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {String} [prefix] The value to prefix the id with.\n   * @returns {Number|String} Returns a numeric id if no prefix is passed, else\n   *  a string id may be returned.\n   * @example\n   *\n   * _.uniqueId('contact_');\n   * // => 'contact_104'\n   */\n  function uniqueId(prefix) {\n    var id = idCounter++;\n    return prefix ? prefix + id : id;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * A JavaScript micro-templating method, similar to John Resig's implementation.\n   * Lo-Dash templating handles arbitrary delimiters, preserves whitespace, and\n   * correctly escapes quotes within interpolated code.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {String} text The template text.\n   * @param {Obect} data The data object used to populate the text.\n   * @param {Object} options The options object.\n   * @returns {Function|String} Returns a compiled function when no `data` object\n   *  is given, else it returns the interpolated text.\n   * @example\n   *\n   * // using compiled template\n   * var compiled = _.template('hello: <%= name %>');\n   * compiled({ 'name': 'moe' });\n   * // => 'hello: moe'\n   *\n   * var list = '% _.forEach(people, function(name) { %> <li><%= name %></li> <% }); %>';\n   * _.template(list, { 'people': ['moe', 'curly', 'larry'] });\n   * // => '<li>moe</li><li>curly</li><li>larry</li>'\n   *\n   * var template = _.template('<b><%- value %></b>');\n   * template({ 'value': '<script>' });\n   * // => '<b>&lt;script&gt;</b>'\n   *\n   * // using `print`\n   * var compiled = _.template('<% print(\"Hello \" + epithet); %>');\n   * compiled({ 'epithet': 'stooge' });\n   * // => 'Hello stooge.'\n   *\n   * // using custom template settings\n   * _.templateSettings = {\n   *   'interpolate': /\\{\\{(.+?)\\}\\}/g\n   * };\n   *\n   * var template = _.template('Hello {{ name }}!');\n   * template({ 'name': 'Mustache' });\n   * // => 'Hello Mustache!'\n   *\n   *\n   * // using the `variable` option\n   * _.template('<%= data.hasWith %>', { 'hasWith': 'no' }, { 'variable': 'data' });\n   * // => 'no'\n   *\n   * // using the `source` property\n   * <script>\n   *   JST.project = <%= _.template(jstText).source %>;\n   * </script>\n   */\n  function template(text, data, options) {\n    options = defaults(options || {}, lodash.templateSettings);\n\n    // Compile the template source, taking care to escape characters that\n    // cannot be included in string literals and then unescape them in code\n    // blocks.\n    var source = \"__p+='\" + text\n      .replace(reEscaper, function(match) {\n        return '\\\\' + escapes[match];\n      })\n      .replace(options.escape || reNoMatch, function(match, code) {\n        return \"'+\\n((__t=(\" + unescape(code) + \"))==null?'':_.escape(__t))+\\n'\";\n      })\n      .replace(options.interpolate || reNoMatch, function(match, code) {\n        return \"'+\\n((__t=(\" + unescape(code) + \"))==null?'':__t)+\\n'\";\n      })\n      .replace(options.evaluate || reNoMatch, function(match, code) {\n        return \"';\\n\" + unescape(code) + \";\\n__p+='\";\n      }) + \"';\\n\";\n\n    // if a variable is not specified, place data values in local scope\n    if (!options.variable) {\n      source = 'with(object||{}){\\n' + source + '\\n}\\n';\n    }\n\n    source = 'var __t,__j=Array.prototype.join,__p=\"\";' +\n      'function print(){__p+=__j.call(arguments,\"\")}\\n' +\n      source + 'return __p';\n\n    var render = Function(options.variable || 'object', '_', source);\n    if (data) {\n      return render(data, lodash);\n    }\n\n    var template = function(data) {\n      return render.call(this, data, lodash);\n    };\n\n    // provide the compiled function source as a convenience for build time precompilation\n    template.source = 'function(' + (options.variable || 'object') + '){\\n' + source + '\\n}';\n\n    return template;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Wraps the value in a `lodash` chainable object.\n   *\n   * @static\n   * @memberOf _\n   * @category Chaining\n   * @param {Mixed} value The value to wrap.\n   * @returns {Object} Returns the `lodash` chainable object.\n   * @example\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 },\n   *   { 'name': 'curly', 'age': 60 }\n   * ];\n   *\n   * var youngest = _.chain(stooges)\n   *     .sortBy(function(stooge) { return stooge.age; })\n   *     .map(function(stooge) { return stooge.name + ' is ' + stooge.age; })\n   *     .first()\n   *     .value();\n   * // => 'moe is 40'\n   */\n  function chain(value) {\n    return new Lodash(value).chain();\n  }\n\n  /**\n   * Extracts the value from a wrapped chainable object.\n   *\n   * @name chain\n   * @memberOf _\n   * @category Chaining\n   * @returns {Mixed} Returns the wrapped object.\n   * @example\n   *\n   * _([1, 2, 3]).value();\n   * // => [1, 2, 3]\n   */\n  function chainWrapper() {\n    this._chain = true;\n    return this;\n  }\n\n  /**\n   * Extracts the value from a wrapped chainable object.\n   *\n   * @memberOf _\n   * @category Chaining\n   * @returns {Mixed} Returns the wrapped object.\n   * @example\n   *\n   * _([1, 2, 3]).value();\n   * // => [1, 2, 3]\n   */\n  function value() {\n    return this._wrapped;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  extend(lodash, {\n\n    /**\n     * The semantic version number.\n     *\n     * @static\n     * @memberOf _\n     * @type String\n     */\n    'VERSION': '0.1.0',\n\n    /**\n     * By default, Lo-Dash uses ERB-style template delimiters, change the\n     * following template settings to use alternative delimiters.\n     *\n     * @static\n     * @memberOf _\n     * @type Object\n     */\n    'templateSettings': {\n\n      /**\n       * Used to detect `data` property values to be HTML-escaped.\n       *\n       * @static\n       * @memberOf _.templateSettings\n       * @type RegExp\n       */\n      'escape': /<%-([\\s\\S]+?)%>/g,\n\n      /**\n       * Used to detect code to be evaluated.\n       *\n       * @static\n       * @memberOf _.templateSettings\n       * @type RegExp\n       */\n      'evaluate': /<%([\\s\\S]+?)%>/g,\n\n      /**\n       * Used to detect `data` property values to inject.\n       *\n       * @static\n       * @memberOf _.templateSettings\n       * @type RegExp\n       */\n      'interpolate': /<%=([\\s\\S]+?)%>/g\n    },\n\n    // assign static methods\n    'after': after,\n    'bind': bind,\n    'bindAll': bindAll,\n    'chain': chain,\n    'clone': clone,\n    'compact': compact,\n    'compose': compose,\n    'contains': contains,\n    'debounce': debounce,\n    'defaults': defaults,\n    'defer': defer,\n    'delay': delay,\n    'difference': difference,\n    'escape': escape,\n    'every': every,\n    'extend': extend,\n    'filter': filter,\n    'find': find,\n    'first': first,\n    'flatten': flatten,\n    'forEach': forEach,\n    'functions': functions,\n    'groupBy': groupBy,\n    'has': has,\n    'identity': identity,\n    'indexOf': indexOf,\n    'initial': initial,\n    'intersection': intersection,\n    'invoke': invoke,\n    'isArguments': isArguments,\n    'isArray': isArray,\n    'isBoolean': isBoolean,\n    'isDate': isDate,\n    'isElement': isElement,\n    'isEmpty': isEmpty,\n    'isEqual': isEqual,\n    'isFinite': isFinite,\n    'isFunction': isFunction,\n    'isNaN': isNaN,\n    'isNull': isNull,\n    'isNumber': isNumber,\n    'isObject': isObject,\n    'isRegExp': isRegExp,\n    'isString': isString,\n    'isUndefined': isUndefined,\n    'keys': keys,\n    'last': last,\n    'lastIndexOf': lastIndexOf,\n    'map': map,\n    'max': max,\n    'memoize': memoize,\n    'min': min,\n    'mixin': mixin,\n    'noConflict': noConflict,\n    'once': once,\n    'pick': pick,\n    'pluck': pluck,\n    'range': range,\n    'reduce': reduce,\n    'reduceRight': reduceRight,\n    'reject': reject,\n    'rest': rest,\n    'result': result,\n    'shuffle': shuffle,\n    'size': size,\n    'some': some,\n    'sortBy': sortBy,\n    'sortedIndex': sortedIndex,\n    'tap': tap,\n    'template': template,\n    'throttle': throttle,\n    'times': times,\n    'toArray': toArray,\n    'union': union,\n    'uniq': uniq,\n    'uniqueId': uniqueId,\n    'values': values,\n    'without': without,\n    'wrap': wrap,\n    'zip': zip,\n\n    // assign aliases\n    'all': every,\n    'any': some,\n    'collect': map,\n    'detect': find,\n    'each': forEach,\n    'foldl': reduce,\n    'foldr': reduceRight,\n    'head': first,\n    'include': contains,\n    'inject': reduce,\n    'intersect': intersection,\n    'methods': functions,\n    'select': filter,\n    'tail': rest,\n    'take': first,\n    'unique': uniq\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  // assign private `Lodash` constructor's prototype\n  Lodash.prototype = lodash.prototype;\n\n  // add all of the static functions to `Lodash.prototype`\n  mixin(lodash);\n\n  // add all mutator Array functions to the wrapper.\n  forEach(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\n    var func = ArrayProto[methodName];\n\n    lodash.prototype[methodName] = function() {\n      var value = this._wrapped;\n      func.apply(value, arguments);\n\n      // IE compatibility mode and IE < 9 have buggy Array `shift()` and `splice()`\n      // functions that fail to remove the last element, `object[0]`, of\n      // array-like-objects even though the `length` property is set to `0`.\n      // The `shift()` method is buggy in IE 8 compatibility mode, while `splice()`\n      // is buggy regardless of mode in IE < 9 and buggy in compatibility mode in IE 9.\n      if (value.length === 0) {\n        delete value[0];\n      }\n      return this._chain ? new Lodash(value).chain() : value;\n    };\n  });\n\n  // add all accessor Array functions to the wrapper.\n  forEach(['concat', 'join', 'slice'], function(methodName) {\n    var func = ArrayProto[methodName];\n    Lodash.prototype[methodName] = function() {\n      var result = func.apply(this._wrapped, arguments);\n      return this._chain ? new Lodash(result).chain() : result;\n    };\n  });\n\n  // add `chain` and `value` after calling to `mixin()` to avoid getting wrapped\n  extend(Lodash.prototype, {\n    'chain': chainWrapper,\n    'value': value\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  // expose Lo-Dash\n  if (freeExports) {\n    // in Node.js or RingoJS v0.8.0+\n    if (typeof module == 'object' && module && module.exports == freeExports) {\n      (module.exports = lodash)._ = lodash;\n    }\n    // in Narwhal or RingoJS v0.7.0-\n    else {\n      freeExports._ = lodash;\n    }\n  } else {\n    // in a browser or Rhino\n    window._ = lodash;\n\n    // Expose Lo-Dash as an AMD module, but only for AMD loaders that understand\n    // the issues with loading multiple versions of Lo-Dash in a page that all\n    // might call `define()`. The loader will indicate they have special\n    // allowances for multiple Lo-Dash versions by specifying\n    // `define.amd.lodash=true`. Register as a named module, since Lo-Dash can\n    // be concatenated with other files that may use `define()`, but not use a\n    // proper concatenation script that understands anonymous AMD modules.\n    // Lowercase `lodash` is used because AMD module names are derived from\n    // file names, and Lo-Dash is normally delivered in a lowercase file name.\n    // Do this after assigning Lo-Dash the global so that if an AMD module wants\n    // to call `noConflict()` to hide this version of Lo-Dash, it will work.\n    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd && define.amd.lodash) {\n      define('lodash', function() {\n        return lodash;\n      });\n    }\n  }\n}(this));\n"},"hash":"9910a9e5a2b259ed874df48fee831a32"}